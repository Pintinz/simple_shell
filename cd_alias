#include "shell.h"

/**
 * struct alias_s - Prints all aliases in the form name='value'
 *@ *name- variable namr
 *@ *value-value var
 *return -
 */

typedef struct alias_s
{
	char *name;
	char *value;
	struct alias_s *next;
} alias_s;

alias_s *alias_list = NULL;

/**
 * print_aliases - Prints all aliases in the form name='value'
 */
void print_aliases(void)
{
	alias_s *current = alias_list;

	while (current != NULL)
	{
		printf("%s='%s'\n", current->name, current->value);
		current = current->next;
	}
}

/**
 * find_alias - Finds an alias by name
 * @name: The name of the alias
 * Return: Pointer to the alias, or NULL if not found
 */
alias_s *find_alias(char *name)
{
	alias_s *current = alias_list;

	while (current != NULL)
	{
		if (strcmp(current->name, name) == 0)
			return current;
		current = current->next;
	}

	return NULL;
}

/**
 * add_alias - Adds or updates an alias
 * @name: The name of the alias
 * @value: The value of the alias
 */
void add_alias(char *name, char *value)
{
	alias_s *alias = find_alias(name);

	if (alias != NULL)
	{
		free(alias->value);
		alias->value = strdup(value);
	}
	else
	{
		alias_s *new_alias = malloc(sizeof(alias_s));
		new_alias->name = strdup(name);
		new_alias->value = strdup(value);
		new_alias->next = alias_list;
		alias_list = new_alias;
	}
}

/**
 * alias_builtin - Implements the alias builtin command
 * @tokens: The command tokens
 */
void alias_builtin(char **tokens)
{
	if (tokens[1] == NULL)
	{
		print_aliases();
		return;
	}

	int i = 1;
	while (tokens[i] != NULL)
	{
		char *name = strtok(tokens[i], "=");
		char *value = strtok(NULL, "=");
		if (value == NULL)
		{
			alias_s *alias = find_alias(name);
			if (alias != NULL)
				printf("%s='%s'\n", alias->name, alias->value);
		}
		else
		{
			add_alias(name, value);
		}
		i++;
	}
}

int main(void)
{
	/* Rest of the code */

	while (TRUE)
	{
		/* Rest of the main function */

		if (_strcmp(tokens[0], "alias", 5) == 0)
		{
			alias_builtin(tokens);
			free(tokens);
			continue;
		}

		/* Rest of the main function */
	}

	return (0);
}

